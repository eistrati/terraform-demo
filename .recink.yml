---
$:
  preprocess:
    '$.terraform.vars.access_key': 'eval'
    '$.terraform.vars.secret_key': 'eval'
    '$.terraform.vars.region': 'eval'
    '$.cnci.token': 'eval'
    '$.cnci.ci.options.user': 'eval'
    '$.cnci.ci.options.token': 'eval'
    '$.cnci.ci.options.jobName': 'eval'
    '$.cnci.ci.options.buildNumber': 'eval'

  emit:
    pattern:
      - /.+\.js$/i
    ignore:
      - /^(.*\/)?node_modules(\/?$)?/i

  terraform:
    version: 0.11.0
    resource: '.resource'
    cache: false
    plan: true
    apply: false
    destroy: false
    save-show-output: tfshow.txt
    vars:
      access_key: 'process.env.AWS_ACCESS_KEY_ID'
      secret_key: 'process.env.AWS_SECRET_ACCESS_KEY'
      region: 'process.env.AWS_DEFAULT_REGION'
    var-files:
      - workspace.default.tfvars
    test:
      plan: './tests/unit/'
      apply: './tests/e2e/'
      unit:
        mocha:
          options:
            ui: 'bdd'
            reporter: 'spec'
      e2e:
        testcafe:
          screenshot:
            enabled: true
            take-on-fail: true
            path: './tests/e2e/screenshots'
          browsers:
            - chrome

  npm:
    scripts: []
    dependencies:
      chai: 'latest'

  test:
    mocha:
      options:
        ui: 'bdd'
        reporter: 'spec'
    pattern:
      - /.+\.spec\.js$/i
    ignore: ~

  e2e:
    testcafe:
      screenshot:
        enabled: true
        take-on-fail: true
        path: './tests/e2e/screenshots'
      browsers:
        - firefox --headless
    pattern:
      - /.+\.e2e\.js$/i
    ignore: ~

  cnci:
    token: 'process.env.token'
    ci:
      provider: jenkins
      options:
        user: 'process.env.JENKINS_USER'
        token: 'process.env.JENKINS_TOKEN'
        jobName: 'process.env.JOB_NAME'
        buildNumber: 'process.env.BUILD_NUMBER'

ec2_dev:
  root: './ec2'
  terraform:
    var-files:
      - workspace.dev.tfvars

ec2_prod:
  root: './ec2'
  terraform:
    var-files:
      - workspace.prod.tfvars

iam_admin_role:
  root: './iam/roles/admin-role'
  terraform:
    run-after:
      - iam_admin_policy

iam_power_user_role:
  root: './iam/roles/power-user-role'
  terraform:
    run-after:
      - iam_power_user_policy

iam_admin_policy:
  root: './iam/policies/admin-policy'

iam_power_user_policy:
  root: './iam/policies/power-user-policy'

# For develepment/testing purpose
demo-bucket:
  root: './bucket'
  terraform:
    var-files: []
    test:
      plan: './tests/demo-bucket'
      apply: './tests/demo-bucket'
